题目：
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

有两个排序的数组nums1和nums2分别为m和n大小。 找到两个排序数组的中位数。整体运行时间复杂度应为O（log（m + n））。

JAVA代码：

public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null)           //两个数组当中有空的情况
            return 0;
        if (nums1.length == 0 && nums2.length == 0)        //两数组长度皆为0的情况
            return 0;
        int m = nums1.length;
        int n = nums2.length;
        if (m == 0)          //单个数组长度为0的情况
            if (n % 2 == 1)
                return nums2[n / 2];
            else
                return ((double)nums2[n / 2] + (double)nums2[n / 2 - 1]) / 2.0;
        else if (n == 0)
            if (m % 2 == 1)
                return nums1[m / 2];
            else
                return ((double)nums1[m / 2] + (double)nums1[m / 2 - 1]) / 2.0;


        int indexOfNums1 = 0;
        int indexOfNums2 = 0;
        boolean isOutOfRange = false;
        int[] mergeArray = new int[m + n];
        for (int i = 0; i < m + n; i++) {             //两个数组合并为一个数组，升序排列

            if (indexOfNums1 < m && (nums1[indexOfNums1] < nums2[indexOfNums2] || isOutOfRange)) {
                mergeArray[i] = nums1[indexOfNums1];
                indexOfNums1++;
            }
            else {
                mergeArray[i] = nums2[indexOfNums2];
                if (indexOfNums2 < n - 1)
                    indexOfNums2++;
                else
                    isOutOfRange = true;
            }
        }

        if ((m + n) % 2 == 1)
            return mergeArray[(m + n) / 2];
        else
            return ((double)mergeArray[(m + n) / 2] + (double)mergeArray[(m + n) / 2 - 1]) / 2.0;
    }
}
